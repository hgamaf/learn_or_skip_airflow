"""Dashboard para visualizaÃ§Ã£o de transaÃ§Ãµes bancÃ¡rias."""
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import pandas as pd
from pathlib import Path
import sys

# Adiciona o diretÃ³rio raiz ao PYTHONPATH
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from src.database.db_manager import DatabaseManager

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(
    page_title="Dashboard de TransaÃ§Ãµes",
    page_icon="ğŸ’°",
    layout="wide"
)

# TÃ­tulo
st.title("ğŸ“Š Dashboard de TransaÃ§Ãµes BancÃ¡rias")

# Inicializa o banco de dados
db_manager = DatabaseManager()

# Carrega os dados
df = db_manager.load_transactions()

if df.empty:
    st.warning("NÃ£o hÃ¡ dados de transaÃ§Ãµes disponÃ­veis.")
else:
    # Converte a coluna de data para datetime e remove linhas com datas nulas
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    df = df.dropna(subset=['date'])

    if df.empty:
        st.warning("NÃ£o hÃ¡ transaÃ§Ãµes com datas vÃ¡lidas.")
    else:
        # Filtro de datas
        st.sidebar.header("Filtros")

        # ObtÃ©m as datas mÃ­nima e mÃ¡xima do DataFrame
        min_date = df['date'].min().date()
        max_date = df['date'].max().date()

        # Cria o widget de seleÃ§Ã£o de datas
        selected_date_range = st.sidebar.date_input(
            "Selecione o perÃ­odo",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )

        # Filtra os dados baseado na seleÃ§Ã£o
        if len(selected_date_range) == 2:
            start_date, end_date = selected_date_range
            mask = (df['date'].dt.date >= start_date) & (df['date'].dt.date <= end_date)
            filtered_df = df[mask]
        else:
            filtered_df = df

        # MÃ©tricas principais
        col1, col2, col3 = st.columns(3)

        with col1:
            total_transactions = len(filtered_df)
            st.metric("Total de TransaÃ§Ãµes", total_transactions)

        with col2:
            total_amount = filtered_df['amount'].sum()
            st.metric("Valor Total", f"R$ {total_amount:,.2f}")

        with col3:
            avg_amount = filtered_df['amount'].mean()
            st.metric("Valor MÃ©dio", f"R$ {avg_amount:,.2f}")

        # GrÃ¡ficos
        st.subheader("ğŸ“ˆ AnÃ¡lise de TransaÃ§Ãµes")

        # GrÃ¡fico de linha - Valor das transaÃ§Ãµes ao longo do tempo
        fig_line = px.line(
            filtered_df,
            x='date',
            y='amount',
            title='Valor das TransaÃ§Ãµes ao Longo do Tempo',
            labels={'date': 'Data', 'amount': 'Valor (R$)'}
        )
        st.plotly_chart(fig_line, use_container_width=True)

        # GrÃ¡fico de pizza - DistribuiÃ§Ã£o por categoria
        fig_pie = px.pie(
            filtered_df,
            values='amount',
            names='category',
            title='DistribuiÃ§Ã£o de Valores por Categoria'
        )
        st.plotly_chart(fig_pie, use_container_width=True)

        # GrÃ¡fico de barras - Total por tipo de transaÃ§Ã£o
        fig_bar = px.bar(
            filtered_df.groupby('type')['amount'].sum().reset_index(),
            x='type',
            y='amount',
            title='Total por Tipo de TransaÃ§Ã£o',
            labels={'type': 'Tipo', 'amount': 'Valor Total (R$)'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)

        # Tabela de dados
        st.subheader("ğŸ“‹ Detalhes das TransaÃ§Ãµes")
        st.dataframe(
            filtered_df.sort_values('date', ascending=False),
            use_container_width=True
        ) 